// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
      /* addressing patterns:
       * 0x0000 - RAM[0] => 0b0000 0x000
       * 0x3FFF - RAM end => 0b0011 0xFFF
       * 0x4000 - screen start => 0b0100 0x000
       * 0x5FFF - screen end => 0b0101 0xFFF
       * 0x6000 - keyboard => 0b0110 0x000
       */

      /* only access screen when two address MSB are 10 */
      /* only access keyboard when to address MSB are 11 */
      DMux4Way(in=load, sel=address[13..14], a=loadram1, b=loadram2, c=loadscreen, d=loadkbd);
      
      /* else access RAM */
      Or(a=loadram1, b=loadram2, out=loadram);

      /* RAM */
      RAM16K(in=in, load=loadram, address=address[0..13], out=ramout);
      
      /* screen */
      Screen(in=in, load=loadscreen, address=address[0..12], out=screenout);

      /* keyboard */ 
      Keyboard(out=kbdout);

      /* mux total output */
      Mux4Way16(a=ramout, b=ramout, c=screenout, d=kbdout, sel=address[13..14], out=out);
}

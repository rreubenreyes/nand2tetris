// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
      /* choose which address to access */
      DMux8Way(in=load, sel=address, a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
      
      /* demuxed output will ony assign `true` to one of the below addresses via `load` */
      /* if `load` is 0, then the existing value in the register will be emitted */
      Register(in=in, load=a, out=rega);
      Register(in=in, load=b, out=regb);
      Register(in=in, load=c, out=regc);
      Register(in=in, load=d, out=regd);
      Register(in=in, load=e, out=rege);
      Register(in=in, load=f, out=regf);
      Register(in=in, load=g, out=regg);
      Register(in=in, load=h, out=regh);

      /* re-mux the address selection to emit the desired register's value via r/w */
      Mux8Way16(
        a=rega, // is either `in(t)` or `out(t-1)`
        b=regb,
        c=regc,
        d=regd,
        e=rege,
        f=regf,
        g=regg,
        h=regh,
        sel=address,
        out=out
      );
}
